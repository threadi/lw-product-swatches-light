<?xml version="1.0" encoding="UTF-8"?>
<project name="product-swatches-light" basedir="." default="help">

    <!-- Include config file containing  -->
    <loadproperties srcFile="build.properties" />

    <!-- Sets variables which can later be used. -->
    <property name="src.dir" location="../" />
    <property name="build.dir" location="../releases" />
    <property name="log.dir" location="./" />

    <!-- check for necessary vars -->
    <fail unless="plugin.slug" />
    <fail unless="plugin.version" />
	<fail unless="composer.path" />
    <fail message="Do not run as root!">
        <condition>
            <equals arg1="root" arg2="${user.name}"/>
        </condition>
    </fail>

	<!-- install composer -->
	<target name="composer-install">
		<delete file="${log.dir}/composer-install.txt"/>
		<delete file="${log.dir}/composer-update.txt"/>
		<exec dir="${src.dir}" failonerror="true" executable="${composer.path}" output="${log.dir}/composer-install.txt">
			<arg line="install"/>
		</exec>
		<exec dir="${src.dir}" failonerror="true" executable="${composer.path}" output="${log.dir}/composer-update.txt">
			<arg line="update"/>
		</exec>
	</target>

	<!-- check WCS compatibility -->
	<target name="check-wcs" depends="composer-install">
		<exec dir="${src.dir}" failonerror="false" executable="vendor/bin/phpcbf">
			<arg line="--extensions=php --ignore=*/vendor/*,*/build/*,*/node_modules/*,*/blocks/*,*/svn/*,*/example/*,*/deprecated/* --standard=ruleset.xml ."/>
		</exec>
		<exec dir="${src.dir}" failonerror="true" executable="vendor/bin/phpcs">
			<arg line="--extensions=php --ignore=*/vendor/*,*/build/*,*/node_modules/*,*/blocks/*,*/svn/*,*/example/*,*/deprecated/* --standard=ruleset.xml ."/>
		</exec>
	</target>

	<!-- generate documentation -->
	<target name="generate-documentation" depends="composer-install">
		<exec dir="${src.dir}" failonerror="false" executable="vendor/bin/wp-documentor">
			<arg line="parse app --format=markdown --output=docs/hooks.md --prefix=product_swatches_light"/>
		</exec>
	</target>

    <!-- set version number in plugin-file for the release -->
    <target name="setVersionNumber">
        <delete file="${build.dir}/${plugin.slug}-release.php"/>
        <copy file="${src.dir}/${plugin.slug}.php" tofile="${src.dir}/${plugin.slug}-release.php"/>
        <replace file="${src.dir}/${plugin.slug}-release.php">
            <replacefilter token="@@VersionNumber@@" value="${plugin.version}" />
        </replace>

		<delete file="${build.dir}/uninstall-release.php"/>
		<copy file="${src.dir}/uninstall.php" tofile="${src.dir}/uninstall-release.php"/>
		<replace file="${src.dir}/uninstall-release.php">
			<replacefilter token="@@VersionNumber@@" value="${plugin.version}" />
		</replace>
    </target>

	<!-- generate autoloader for release -->
	<target name="autoloader-generation">
		<delete file="${log.dir}/autoloader-generation.txt"/>
		<exec dir="${src.dir}" failonerror="true" executable="${composer.path}" output="${log.dir}/autoloader-generation.txt">
			<arg line="dump-autoload -oa --no-dev"/>
		</exec>
	</target>

	<!-- generate autoloader for dev -->
	<target name="autoloader-generation-dev">
		<delete file="${log.dir}/autoloader-generation-dev.txt"/>
		<exec dir="${src.dir}" failonerror="true" executable="${composer.path}" output="${log.dir}/autoloader-generation-dev.txt">
			<arg line="dump-autoload -oa"/>
		</exec>
	</target>

	<!-- init project -->
	<target name="init" description="initialize the project" depends="composer-install" />

    <!-- create release-zip -->
    <target name="build" description="builds a new release" depends="init,generate-documentation,autoloader-generation,check-wcs,setVersionNumber">
        <delete file="${build.dir}/${plugin.slug}_${plugin.version}.zip"/>
        <zip destfile="${build.dir}/${plugin.slug}_${plugin.version}.zip">
            <zipfileset dir="${src.dir}/admin" prefix="${plugin.slug}/admin" />
			<zipfileset dir="${src.dir}/app" prefix="${plugin.slug}/app" />
            <zipfileset dir="${src.dir}/css" prefix="${plugin.slug}/css" />
			<zipfileset dir="${src.dir}/gfx" prefix="${plugin.slug}/gfx" />
            <zipfileset dir="${src.dir}/js" prefix="${plugin.slug}/js" />
            <zipfileset dir="${src.dir}/inc" prefix="${plugin.slug}/inc" />
            <zipfileset dir="${src.dir}/templates" prefix="${plugin.slug}/templates" />
			<zipfileset dir="${src.dir}/vendor" includes="autoload.php" fullpath="${plugin.slug}/vendor/autoload.php" />
			<zipfileset dir="${src.dir}/vendor/composer" prefix="${plugin.slug}/vendor/composer" />
			<zipfileset dir="${src.dir}/vendor/threadi/easy-dialog-for-wordpress/build/" prefix="${plugin.slug}/vendor/threadi/easy-dialog-for-wordpress/build/" />
            <zipfileset dir="${src.dir}" includes="readme.txt" prefix="${plugin.slug}" />
			<zipfileset dir="${src.dir}" includes="uninstall-release.php" fullpath="${plugin.slug}/uninstall.php" />
            <zipfileset dir="${src.dir}" includes="${plugin.slug}-release.php" fullpath="${plugin.slug}/${plugin.slug}.php" />
        </zip>
		<antcall target="autoloader-generation-dev" />
        <delete file="${src.dir}/${plugin.slug}-release.php"/>
		<delete file="${src.dir}/uninstall-release.php"/>
    </target>

    <target name="help">
        <java classname="org.apache.tools.ant.Main">
            <arg value="-projecthelp" />
            <arg value="-buildfile" />
            <arg value="build.xml" />
        </java>
    </target>

</project>
